import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Header from './header';
import styles from '../styles/navbar.module.css';
import Link from 'next/link'
import Location from '../components/location';
import Upcoming from '../components/upcoming';
import Past from '../components/past'

export default function Home({dataFilter, upcomingFilter, pastFilter}) {

const [currentNav, setCurrentNav] = useState("nearest")



const onNearestHandler = () => {

  setCurrentNav("nearest")
  
}

const onUpcomingHandler = () => {

  setCurrentNav("upcoming")
  
}

const onPastHandler = () => {

  setCurrentNav("past")
  
}
  return (
    <div  className={styles.overall}>
      <Head>
        <title>Edvora</title>
        <meta name="description" content="Generated by create next app" />
k        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main >

        {/* header */}
        <Header />

        {/* Navbar */}
        <nav className={styles.navbar}>
          <ul className={styles.ride}>
            <li onClick={onNearestHandler} className={styles.rideList1}>Nearest Ride</li>
            <li onClick={onUpcomingHandler} className={styles.rideList1}>Upcoming rides (4)</li>
            <li onClick={onPastHandler} className={styles.rideList1}>Past rides(2)</li>
            <li><Link href="/filter"><a>Filters</a></Link></li>

          </ul>
        </nav>

         {currentNav === "nearest" ? <Location dataFilter={dataFilter}/>: ""}

        {currentNav === "upcoming" ? <Upcoming upcomingFilter={upcomingFilter}/> : ""}

        {currentNav === "past" ? <Past pastFilter={pastFilter}/> : ""}
         

        </main>

      
    </div>
  )
}
export async function getServerSideProps () {
  const res = await fetch(`https://assessment.api.vweb.app/rides`)
  const rides = await res.json()

  const req = await fetch(`https://assessment.api.vweb.app/user`)
  const users = await req.json()
  

  const dataFilter = rides.filter((ride) => {
      for (const station of ride.station_path) {
          if(Math.abs(users.station_code - station) < 3) {
              return true
              break;
          }
      }
      return
  })

  const upcomingFilter = rides.filter((ride) => ( new Date() < new Date(ride.date)) )

  const pastFilter = rides.filter((ride) => ( new Date() > new Date(ride.date)) ) 
  
   

  return {props : {
       dataFilter,
      upcomingFilter,
      pastFilter
      }}
}